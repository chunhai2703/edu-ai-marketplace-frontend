
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  MessageCircle, 
  Send, 
  Bot, 
  User, 
  X, 
  Minimize2,
  Maximize2,
  Star,
  Clock
} from 'lucide-react';
import { Course, mockCourses } from '@/data/mockData';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  courses?: Course[];
}

interface ChatBotProps {
  onViewCourse: (course: Course) => void;
  onAddToViewHistory: (course: Course) => void;
}

export const ChatBot: React.FC<ChatBotProps> = ({ onViewCourse, onAddToViewHistory }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa EduMarket. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm kh√≥a h·ªçc ph√π h·ª£p. H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën h·ªçc g√¨ nh√©! üìö',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const getAIResponse = (userMessage: string): { content: string; courses?: Course[] } => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Define keywords and corresponding responses
    const responses = [
      {
        keywords: ['ti·∫øng anh', 'english', 'n√≥i ti·∫øng anh', 'giao ti·∫øp'],
        response: 'Tuy·ªát v·ªùi! T√¥i t√¨m th·∫•y m·ªôt s·ªë kh√≥a h·ªçc ti·∫øng Anh ch·∫•t l∆∞·ª£ng cao cho b·∫°n:',
        courses: mockCourses.filter(course => 
          course.category === 'Language Learning' && course.title.toLowerCase().includes('english')
        )
      },
      {
        keywords: ['l·∫≠p tr√¨nh', 'programming', 'react', 'typescript', 'code'],
        response: 'R·∫•t t·ªët! ƒê√¢y l√† nh·ªØng kh√≥a h·ªçc l·∫≠p tr√¨nh ƒë∆∞·ª£c ƒë√°nh gi√° cao:',
        courses: mockCourses.filter(course => 
          course.category === 'Programming' || course.skills.some(skill => 
            ['React', 'TypeScript', 'Python'].includes(skill)
          )
        )
      },
      {
        keywords: ['marketing', 'digital marketing', 'qu·∫£ng c√°o', 'b√°n h√†ng'],
        response: 'Marketing l√† lƒ©nh v·ª±c r·∫•t hot hi·ªán nay! T√¥i g·ª£i √Ω nh·ªØng kh√≥a h·ªçc n√†y:',
        courses: mockCourses.filter(course => course.category === 'Marketing')
      },
      {
        keywords: ['thi·∫øt k·∫ø', 'design', 'ui', 'ux', 'ƒë·ªì h·ªça'],
        response: 'Thi·∫øt k·∫ø l√† m·ªôt k·ªπ nƒÉng tuy·ªát v·ªùi! ƒê√¢y l√† nh·ªØng kh√≥a h·ªçc design ph√π h·ª£p:',
        courses: mockCourses.filter(course => course.category === 'Design')
      },
      {
        keywords: ['data science', 'machine learning', 'd·ªØ li·ªáu', 'ai', 'python'],
        response: 'Data Science l√† t∆∞∆°ng lai! T√¥i t√¨m th·∫•y nh·ªØng kh√≥a h·ªçc tuy·ªát v·ªùi n√†y:',
        courses: mockCourses.filter(course => 
          course.category === 'Data Science' || course.skills.includes('Python')
        )
      },
      {
        keywords: ['nhi·∫øp ·∫£nh', 'photography', 'ch·ª•p ·∫£nh', 'photo'],
        response: 'Nhi·∫øp ·∫£nh l√† ngh·ªá thu·∫≠t tuy·ªát ƒë·∫πp! Kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n:',
        courses: mockCourses.filter(course => course.category === 'Creative Arts')
      },
      {
        keywords: ['ti·∫øng nh·∫≠t', 'japanese', 'jlpt', 'nh·∫≠t b·∫£n'],
        response: 'Ti·∫øng Nh·∫≠t r·∫•t th√∫ v·ªã! T√¥i c√≥ kh√≥a h·ªçc ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu:',
        courses: mockCourses.filter(course => 
          course.title.toLowerCase().includes('japanese') || course.title.toLowerCase().includes('nh·∫≠t')
        )
      },
      {
        keywords: ['business', 'kinh doanh', 'qu·∫£n l√Ω', 'd·ª± √°n'],
        response: 'K·ªπ nƒÉng kinh doanh r·∫•t quan tr·ªçng! ƒê√¢y l√† nh·ªØng kh√≥a h·ªçc t√¥i g·ª£i √Ω:',
        courses: mockCourses.filter(course => course.category === 'Business')
      }
    ];

    // Find matching response
    for (const response of responses) {
      if (response.keywords.some(keyword => lowerMessage.includes(keyword))) {
        return {
          content: response.response,
          courses: response.courses
        };
      }
    }

    // Default responses for common queries
    if (lowerMessage.includes('gi√°') || lowerMessage.includes('bao nhi√™u')) {
      return {
        content: 'C√°c kh√≥a h·ªçc tr√™n n·ªÅn t·∫£ng c√≥ m·ª©c gi√° ƒëa d·∫°ng t·ª´ 500K ƒë·∫øn 2 tri·ªáu VNƒê. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng b·ªô l·ªçc gi√° ƒë·ªÉ t√¨m kh√≥a h·ªçc ph√π h·ª£p v·ªõi ng√¢n s√°ch. B·∫°n ƒëang t√¨m kh√≥a h·ªçc trong t·∫ßm gi√° n√†o? üí∞'
      };
    }

    if (lowerMessage.includes('ch·ª©ng ch·ªâ') || lowerMessage.includes('certificate')) {
      return {
        content: 'H·∫ßu h·∫øt c√°c kh√≥a h·ªçc ƒë·ªÅu c·∫•p ch·ª©ng ch·ªâ ho√†n th√†nh ƒë∆∞·ª£c c√¥ng nh·∫≠n. B·∫°n c√≥ th·ªÉ xem th√¥ng tin ch·ª©ng ch·ªâ trong ph·∫ßn chi ti·∫øt kh√≥a h·ªçc. B·∫°n ƒëang quan t√¢m ƒë·∫øn lƒ©nh v·ª±c n√†o? üèÜ'
      };
    }

    if (lowerMessage.includes('th·ªùi gian') || lowerMessage.includes('bao l√¢u')) {
      return {
        content: 'Th·ªùi gian h·ªçc t√πy thu·ªôc v√†o t·ª´ng kh√≥a h·ªçc, th∆∞·ªùng t·ª´ 8-20 tu·∫ßn. B·∫°n c√≥ th·ªÉ h·ªçc theo t·ªëc ƒë·ªô c·ªßa m√¨nh v·ªõi c√°c video b√†i gi·∫£ng c√≥ th·ªÉ xem l·∫°i nhi·ªÅu l·∫ßn. B·∫°n mu·ªën t√¨m kh√≥a h·ªçc ng·∫Øn h·∫°n hay d√†i h·∫°n? ‚è∞'
      };
    }

    // Default response
    return {
      content: 'T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm kh√≥a h·ªçc! ƒê·ªÉ t√¥i c√≥ th·ªÉ g·ª£i √Ω ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\n‚Ä¢ B·∫°n mu·ªën h·ªçc lƒ©nh v·ª±c g√¨? (ti·∫øng Anh, l·∫≠p tr√¨nh, marketing, thi·∫øt k·∫ø...)\n‚Ä¢ M·ª©c ƒë·ªô c·ªßa b·∫°n? (m·ªõi b·∫Øt ƒë·∫ßu, trung c·∫•p, n√¢ng cao)\n‚Ä¢ Ng√¢n s√°ch mong mu·ªën?\n\nV√≠ d·ª•: "T√¥i mu·ªën h·ªçc ti·∫øng Anh giao ti·∫øp" ho·∫∑c "T√¥i c·∫ßn h·ªçc l·∫≠p tr√¨nh React" ü§ñ',
      courses: mockCourses.slice(0, 3) // Show some popular courses
    };
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse = getAIResponse(inputValue);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: aiResponse.content,
        timestamp: new Date(),
        courses: aiResponse.courses
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1500);
  };

  const handleCourseClick = (course: Course) => {
    onAddToViewHistory(course);
    onViewCourse(course);
  };

  return (
    <>
      {/* Chat Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-blue-600 hover:bg-blue-700 shadow-lg z-50"
          size="icon"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <Card className={`fixed bottom-6 right-6 w-96 shadow-2xl z-50 transition-all duration-300 ${
          isMinimized ? 'h-16' : 'h-[600px]'
        }`}>
          {/* Header */}
          <CardHeader className="p-4 bg-blue-600 text-white rounded-t-lg">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2 text-lg">
                <Bot className="h-5 w-5" />
                AI Learning Assistant
              </CardTitle>
              <div className="flex gap-1">
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-8 w-8 text-white hover:bg-blue-700"
                  onClick={() => setIsMinimized(!isMinimized)}
                >
                  {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-8 w-8 text-white hover:bg-blue-700"
                  onClick={() => setIsOpen(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
            {!isMinimized && (
              <p className="text-sm text-blue-100">
                T√¨m kh√≥a h·ªçc ph√π h·ª£p v·ªõi b·∫°n üéØ
              </p>
            )}
          </CardHeader>

          {!isMinimized && (
            <>
              {/* Messages */}
              <CardContent className="p-0 h-96 overflow-y-auto custom-scrollbar">
                <div className="p-4 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : ''}`}
                    >
                      {message.type === 'bot' && (
                        <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                          <Bot className="h-4 w-4 text-blue-600" />
                        </div>
                      )}
                      
                      <div className={`max-w-[80%] ${message.type === 'user' ? 'order-first' : ''}`}>
                        <div
                          className={`p-3 rounded-lg ${
                            message.type === 'user'
                              ? 'bg-blue-600 text-white ml-auto'
                              : 'bg-gray-100 text-gray-900'
                          }`}
                        >
                          <p className="text-sm whitespace-pre-line">{message.content}</p>
                        </div>
                        
                        {message.courses && message.courses.length > 0 && (
                          <div className="mt-3 space-y-2">
                            {message.courses.map((course) => (
                              <div
                                key={course.id}
                                onClick={() => handleCourseClick(course)}
                                className="p-3 bg-white border rounded-lg hover:shadow-md cursor-pointer transition-shadow"
                              >
                                <div className="flex gap-3">
                                  <img
                                    src={course.image}
                                    alt={course.title}
                                    className="h-12 w-16 object-cover rounded"
                                  />
                                  <div className="flex-1 min-w-0">
                                    <h4 className="font-medium text-sm text-gray-900 truncate">
                                      {course.title}
                                    </h4>
                                    <p className="text-xs text-gray-500 mb-1">{course.instructor}</p>
                                    <div className="flex items-center gap-3 text-xs text-gray-500">
                                      <div className="flex items-center gap-1">
                                        <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                                        {course.rating}
                                      </div>
                                      <div className="flex items-center gap-1">
                                        <Clock className="h-3 w-3" />
                                        {course.duration}
                                      </div>
                                    </div>
                                    <div className="flex items-center justify-between mt-1">
                                      <span className="font-semibold text-sm text-blue-600">
                                        {formatPrice(course.price)}
                                      </span>
                                      <Badge variant="secondary" className="text-xs">
                                        {course.level}
                                      </Badge>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        <p className="text-xs text-gray-500 mt-1">
                          {message.timestamp.toLocaleTimeString('vi-VN', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </p>
                      </div>

                      {message.type === 'user' && (
                        <div className="h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                          <User className="h-4 w-4 text-white" />
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {isTyping && (
                    <div className="flex gap-3">
                      <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <Bot className="h-4 w-4 text-blue-600" />
                      </div>
                      <div className="bg-gray-100 p-3 rounded-lg">
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              </CardContent>

              {/* Input */}
              <div className="p-4 border-t">
                <div className="flex gap-2">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    disabled={isTyping}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputValue.trim() || isTyping}
                    size="icon"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </>
          )}
        </Card>
      )}
    </>
  );
};
